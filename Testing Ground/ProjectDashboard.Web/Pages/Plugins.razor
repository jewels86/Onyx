@page "/plugins"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using ProjectDashboard.Web.Services
@using ProjectDashboard.Web.Services.Plugins
@attribute [Authorize]
@inject PluginHost Host
@inject ProjectService Projects
@inject ProjectContextBuilder CtxBuilder
@inject Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider AuthStateProvider

<h2>Plugins</h2>
<p>Plugins are loaded from the <code>Plugins</code> folder on the server at startup.</p>
<p><b>Warning:</b> These run UNSANDBOXED on the server. For testing only.</p>

@if (plugins is null)
{
    <p>Loading plugins...</p>
}
else if (plugins.Count == 0)
{
    <p>No plugins found. Build the sample plugin to populate.</p>
}
else
{
    <div class="grid">
        @foreach (var p in plugins)
        {
            <div class="card">
                <h3>@p.Name</h3>
                <p>@p.Description</p>
                <div class="row">
                    <InputNumber @bind-Value="selectedProjectId" />
                    <button @onclick="() => Run(p)">Run on Project</button>
                </div>
            </div>
        }
    </div>
}

@if (!string.IsNullOrEmpty(output))
{
    <div class="card">
        <h3>Output</h3>
        <pre>@output</pre>
    </div>
}

@code {
    private IReadOnlyList<ProjectDashboard.Abstractions.IPlugin>? plugins;
    private int selectedProjectId;
    private string? output;

    protected override async Task OnInitializedAsync()
    {
        plugins = Host.Plugins;
        var projs = await Projects.GetProjectsAsync();
        selectedProjectId = projs.FirstOrDefault()?.Id ?? 0;
    }

    private async Task Run(ProjectDashboard.Abstractions.IPlugin plugin)
    {
        var auth = await AuthStateProvider.GetAuthenticationStateAsync();
        var userName = auth.User?.Identity?.Name ?? "unknown";

        var ctx = await CtxBuilder.BuildAsync(selectedProjectId, userName);
        if (ctx is null) { output = "Invalid project id."; return; }

        // Optional: Provide a logger into the context
        var logLines = new List<string>();
        var ctxWithLog = new ProjectDashboard.Abstractions.ProjectContext
        {
            Project = ctx.Project,
            Tasks = ctx.Tasks,
            Secrets = ctx.Secrets,
            Storage = ctx.Storage,
            Log = s => logLines.Add(s)
        };

        var result = await plugin.ExecuteAsync(ctxWithLog);
        output = $"Plugin: {plugin.Name}\nSuccess: {result.Success}\nOutput:\n{result.Output}\n\nLog:\n{string.Join("\n", logLines)}";
    }
}