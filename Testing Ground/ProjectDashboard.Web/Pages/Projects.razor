@page "/projects"
@using ProjectDashboard.Web.Services
@using ProjectDashboard.Web.Models
@using Microsoft.AspNetCore.Components.Authorization
@inject ProjectService ProjectService
@inject AuthenticationStateProvider AuthStateProvider

<h2>Projects</h2>

<div class="card">
    <h3>Create Project</h3>
    <EditForm Model="@_newProject" OnValidSubmit="@Create">
        <div class="row">
            <InputText @bind-Value="_newProject.Name" placeholder="Name" />
            <InputText @bind-Value="_newProject.Description" placeholder="Description" />
            <button type="submit">Create</button>
        </div>
    </EditForm>
</div>

@if (_items is null)
{
    <p>Loading...</p>
}
else
{
    <div class="grid">
        @foreach (var p in _items)
        {
            <div class="card">
                <h3>@p.Name</h3>
                <p>@p.Description</p>
                <p>Status: <b>@p.Status</b></p>
                <ProjectTasks ProjectId="@p.Id" />
            </div>
        }
    </div>
}

@code {
    private List<Project>? _items;
    private NewProject _newProject = new();

    class NewProject
    {
        public string Name { get; set; } = string.Empty;
        public string? Description { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        _items = await ProjectService.GetProjectsAsync();
    }

    private async Task Create()
    {
        var auth = await AuthStateProvider.GetAuthenticationStateAsync();
        var userName = auth.User?.Identity?.Name ?? "unknown";
        var p = await ProjectService.CreateAsync(_newProject.Name, userName, _newProject.Description);
        _items?.Insert(0, p);
        _newProject = new();
        StateHasChanged();
    }
}
