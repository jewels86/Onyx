@page "/secrets"
@using ProjectDashboard.Web.Services
@attribute [Authorize]
@inject SensitiveDataService SecretsSvc
@inject Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JS

<h2>Secrets</h2>

<div class="card">
    <h3>Store Secret</h3>
    <EditForm Model="@form" OnValidSubmit="@Store">
        <div class="row">
            <InputSelect @bind-Value="form.Kind">
                <option>ApiKey</option>
                <option>Password</option>
                <option>Note</option>
            </InputSelect>
            <InputText @bind-Value="form.Name" placeholder="Name" />
            <InputText @bind-Value="form.Value" placeholder="Value" />
            <InputNumber @bind-Value="form.ProjectId" />
            <button type="submit">Save</button>
        </div>
    </EditForm>
</div>

<div class="card">
    <h3>Your Secrets</h3>
    @if (items is null) { <p>Loading...</p> }
    else if (items.Count == 0) { <p>No secrets yet.</p> }
    else
    {
        <table>
            <thead><tr><th>Kind</th><th>Name</th><th>Project</th><th>Created</th><th>Actions</th></tr></thead>
            <tbody>
            @foreach (var s in items)
            {
                <tr>
                    <td>@s.Kind</td>
                    <td>@s.Name</td>
                    <td>@s.ProjectId</td>
                    <td>@s.CreatedAt.ToLocalTime()</td>
                    <td><button @onclick="() => Reveal(s.Id)">Reveal</button></td>
                </tr>
            }
            </tbody>
        </table>
    }
</div>

@code {
    private List<ProjectDashboard.Web.Models.SensitiveItem>? items;

    class SecretForm { public string Kind { get; set; } = "ApiKey"; public string Name { get; set; } = ""; public string Value { get; set; } = ""; public int? ProjectId { get; set; } }
    private SecretForm form = new();

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthStateProvider.GetAuthenticationStateAsync()).User;
        var userId = user.Identity?.Name ?? "";
        items = await SecretsSvc.ListAsync(userId);
    }

    private async Task Store()
    {
        var user = (await AuthStateProvider.GetAuthenticationStateAsync()).User;
        var userId = user.Identity?.Name ?? "";
        await SecretsSvc.StoreAsync(userId, form.Kind, form.Name, form.Value, form.ProjectId);
        items = await SecretsSvc.ListAsync(userId);
        form = new();
    }

    private async Task Reveal(int id)
    {
        var user = (await AuthStateProvider.GetAuthenticationStateAsync()).User;
        var userId = user.Identity?.Name ?? "";
        var val = await SecretsSvc.RetrieveAsync(id, userId);
        await JS.InvokeVoidAsync("alert", $"{val}");
    }
}
