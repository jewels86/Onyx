@using ProjectDashboard.Web.Services
@inject TaskService TasksSvc

@if (projectTasks is null)
{
    <p>Loading tasks...</p>
}
else
{
    <table>
        <thead><tr><th>Task</th><th>Due</th><th>Assigned</th><th>Status</th><th></th></tr></thead>
        <tbody>
        @foreach (var t in projectTasks)
        {
            <tr>
                <td>@t.Title</td>
                <td>@t.Due?.ToShortDateString()</td>
                <td>@t.AssignedTo</td>
                <td>@(t.Completed ? "Done" : "Open")</td>
                <td>
                    @if (!t.Completed)
                    {
                        <button @onclick="() => Complete(t.Id)">Complete</button>
                    }
                </td>
            </tr>
        }
        </tbody>
    </table>

    <details>
        <summary>Add Task</summary>
        <EditForm Model="@newTask" OnValidSubmit="@AddTask">
            <div class="row">
                <InputText @bind-Value="newTask.Title" placeholder="Title" />
                <InputText @bind-Value="newTask.AssignedTo" placeholder="Assign to" />
                <InputDate @bind-Value="newTask.Due" />
                <button type="submit">Add</button>
            </div>
        </EditForm>
    </details>
}

@code {
    [Parameter] public int ProjectId { get; set; }
    private List<ProjectDashboard.Web.Models.TaskItem>? projectTasks;
    private NewTask newTask = new();

    class NewTask
    {
        public string Title { get; set; } = string.Empty;
        public string? AssignedTo { get; set; }
        public DateTime? Due { get; set; }
    }

    protected override async Task OnParametersSetAsync()
    {
        projectTasks = await TasksSvc.GetTasksForProjectAsync(ProjectId);
    }

    private async Task Complete(int id)
    {
        await TasksSvc.CompleteAsync(id);
        projectTasks = await TasksSvc.GetTasksForProjectAsync(ProjectId);
    }

    private async Task AddTask()
    {
        await TasksSvc.AddTaskAsync(ProjectId, newTask.Title, newTask.AssignedTo, newTask.Due);
        projectTasks = await TasksSvc.GetTasksForProjectAsync(ProjectId);
        newTask = new();
    }
}
